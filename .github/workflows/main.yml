name: Update Kernel
on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  update-kernel:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      kernel_version: ${{ steps.latest.outputs.version }}
      version_changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure version.txt exists
        run: |
          mkdir -p kernel
          if [ ! -f "kernel/version.txt" ]; then
            echo "0.0.0" > kernel/version.txt
          fi

      - name: Get current version
        id: current
        run: echo "version=$(cat kernel/version.txt)" >> $GITHUB_OUTPUT

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch latest stable kernel version
        id: latest
        run: |
          version=$(curl -s https://www.kernel.org/releases.json | jq -r '.latest_stable.version')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check
        run: |
          if [ "${{ steps.latest.outputs.version }}" != "${{ steps.current.outputs.version }}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version.txt if changed
        if: steps.check.outputs.changed == 'true'
        run: echo "${{ steps.latest.outputs.version }}" > kernel/version.txt

      - name: Commit version update
        if: steps.check.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add kernel/version.txt
          git commit -m "chore: update kernel to ${{ steps.latest.outputs.version }}"
          git push

  matrix-build:
    needs: update-kernel
    if: needs.update-kernel.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    timeout-minutes: 180
    strategy:
      matrix:
        flavor: [tiny, full]
      fail-fast: false
    steps:
      - name: Free disk space (1/3)
        if: matrix.flavor == 'full'
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo docker builder prune -a

      - name: Free disk space (2/3)
        if: matrix.flavor == 'full'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true

      - name: Free disk space (3/3)
        if: matrix.flavor == 'full'
        uses: rokibhasansagar/slimhub_actions@main
        with:
          retain: 'compiler_cmake'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Pull latest changes
        run: git pull origin main

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses-dev \
            bison \
            flex \
            libssl-dev \
            libelf-dev \
            bc \
            kmod \
            cpio \
            rsync \
            jq

      - name: Cache kernel source
        uses: actions/cache@v4
        with:
          path: linux-${{ needs.update-kernel.outputs.kernel_version }}
          key: kernel-source-${{ needs.update-kernel.outputs.kernel_version }}
          restore-keys: |
            kernel-source-

      - name: Download Linux kernel source
        run: |
          if [ ! -d "linux-${{ needs.update-kernel.outputs.kernel_version }}" ]; then
            wget https://cdn.kernel.org/pub/linux/kernel/v$(echo ${{ needs.update-kernel.outputs.kernel_version }} | cut -d. -f1).x/linux-${{ needs.update-kernel.outputs.kernel_version }}.tar.xz
            tar -xf linux-${{ needs.update-kernel.outputs.kernel_version }}.tar.xz
            rm linux-${{ needs.update-kernel.outputs.kernel_version }}.tar.xz
          fi
          ln -sf linux-${{ needs.update-kernel.outputs.kernel_version }} linux

      - name: Copy config for ${{ matrix.flavor }} build
        run: cp config/config-${{ matrix.flavor }} linux/.config

      - name: Prepare kernel config
        working-directory: linux
        run: |
          make olddefconfig
          make prepare

      - name: Cache build objects
        uses: actions/cache@v4
        with:
          path: linux
          key: kernel-build-${{ needs.update-kernel.outputs.kernel_version }}-${{ matrix.flavor }}-${{ hashFiles('config/config-*') }}
          restore-keys: |
            kernel-build-${{ needs.update-kernel.outputs.kernel_version }}-${{ matrix.flavor }}-
            kernel-build-${{ needs.update-kernel.outputs.kernel_version }}-

      - name: Build kernel (${{ matrix.flavor }})
        working-directory: linux
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      # CORRECTED SECTION STARTS HERE
      - name: Set kernel image filename
        id: set_filename
        run: |
          if [ "${{ matrix.flavor }}" == "full" ]; then
            echo "name=bzImage-big" >> $GITHUB_OUTPUT
          else
            echo "name=bzImage" >> $GITHUB_OUTPUT
          fi

      - name: Copy built bzImage
        run: cp linux/arch/x86/boot/bzImage ./${{ steps.set_filename.outputs.name }}
      # CORRECTED SECTION ENDS HERE

      - name: Create build info
        run: |
          echo "Kernel Version: ${{ needs.update-kernel.outputs.kernel_version }}" > build-info-${{ matrix.flavor }}.txt
          echo "Build Flavor: ${{ matrix.flavor }}" >> build-info-${{ matrix.flavor }}.txt
          echo "Build Date: $(date)" >> build-info-${{ matrix.flavor }}.txt
          echo "Build Host: $(hostname)" >> build-info-${{ matrix.flavor }}.txt

      - name: Create branch and PR for ${{ matrix.flavor }} build
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "ci(build): ${{ matrix.flavor }} flavor build for kernel ${{ needs.update-kernel.outputs.kernel_version }}"
          title: "chore: ${{ matrix.flavor }} build for kernel ${{ needs.update-kernel.outputs.kernel_version }}"
          body: |
            This PR contains the ${{ matrix.flavor }} configuration build for Linux kernel version ${{ needs.update-kernel.outputs.kernel_version }}.

            ## Build Details
            - **Kernel Version**: ${{ needs.update-kernel.outputs.kernel_version }}
            - **Build Flavor**: ${{ matrix.flavor }}
            - **Build Date**: ${{ github.run_id }}
            - **Commit**: ${{ github.sha }}

            This build was automatically generated by the kernel update workflow.
          base: main
          branch: build-${{ matrix.flavor }}-${{ needs.update-kernel.outputs.kernel_version }}
          delete-branch: true
          # CORRECTED ADD-PATHS
          add-paths: |
            ${{ steps.set_filename.outputs.name }}
            build-info-${{ matrix.flavor }}.txt

  notify-completion:
    needs: [update-kernel, matrix-build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify build completion
        run: |
          if [ "${{ needs.update-kernel.outputs.version_changed }}" = "true" ]; then
            if [ "${{ needs.matrix-build.result }}" = "success" ]; then
              echo "✅ Kernel build completed successfully for version ${{ needs.update-kernel.outputs.kernel_version }}"
            else
              echo "❌ Kernel build failed for version ${{ needs.update-kernel.outputs.kernel_version }}"
              exit 1
            fi
          else
            echo "ℹ️ No kernel version change, no build performed."
          fi
